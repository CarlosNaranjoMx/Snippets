{
	//**************(Print,Imprimir)**************//
	"Printf": {
		"prefix": "printf", 
		"body": [
		"printf(\"$1\"${2:,}$3)${4:;}"
		]
	}
	,"Fprmat print": {
		"prefix": "fprint", 
		"body": [
		"printf(\"$1%d\\n\",$2);"
		]
	}
	//**************(Archivos iniciales)**************//
	,"Start": {
		"prefix": "start", 
		"body": [
		"#include <stdio.h> \n int main(){ \n     return 0; \n}"
		]
	}
	//**************(Scaner,Entrada)**************//
	,"Entrada Escaner": {
		"prefix": "entrada", 
		"body": [
		"gets($1);"
		]
	}
	// se deben declarar antes las variables
	//primero no comas, despues todo comas
	// %s- string
	// %d - entero
	,"Scaner": {
		"prefix": "scaner", 
		"body": [
		"scanf(\"%${1:s}\",${2:str});"
		]
	}
	,"Scaner expresion regular": {
		"prefix": "", 
		"body": [
		""
		]
	}
	//**************(Arreglos)**************//
	//tam de 100
	//int arr[2] = {0,1};
	,"Arreglo": {
		"prefix": "astring", 
		"body": [
		"char ${1:nombre} [${2:tam}];"
		]
	}
	//double array[5] = {};
	//**************(Cadenas)**************//
	,"paquete cadenas": {
		"prefix": "pstring", 
		"body": [
		"#include<string.h>"
		]
	}
	,"Compare": {
		"prefix": "cstr", 
		"body": [
		"strcmp(${1:nombre1},${2:nombre2})${3:;}"
		]
	}
	//**************(Llamadas al sistema)**************//
	,"paquete llamada al sistema": {
		"prefix": "psistema", 
		"body": [
		"#include<sys/syscall.h>"
		]
	}
	//**************(Sistema de Archivos)**************//
	,"p sistema de archivos": {
		"prefix": "parchivos", 
		"body": [
		"#include<conio.h>\n#include<dir.h>"
		]
	}
	//**************(Include)**************//
	,"Include": {
		"prefix": "include", 
		"body": [
		"#include $1"
		]
	}
	//**************(Struct)**************//
	//creacion como un arreglo de cosas
	//**************(Threads)**************//
	//bandera al compilador -pthread
	,"pkg thread": {
		"prefix": "pthread", 
		"body": [
		"#include <pthread.h>"
		]
	}
	//**************(Apuntadores)**************//
	// volverlo apuntador &

	//**************(FUnciones)**************//
	// espera un apuntador function(struct algo *cosa) 

	//**************(Malloc)**************//
	,"pkg malloc": {
		"prefix": "pmalloc", 
		"body": [
		"#include <stdlib.h>"
		]
	}

	//**************(Concurrente)**************//

	//**************(Casting)**************//
	//strtol(cadena,parte2,numerode enteros)
}